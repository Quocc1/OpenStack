services:
  minio:
    image: minio/minio:RELEASE.2024-05-01T01-11-10Z
    hostname: minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      - docker_net
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc:RELEASE.2024-04-29T09-56-05Z
    hostname: mc
    container_name: mc
    networks:
      - docker_net
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0
      "  
    depends_on:
      minio:
        condition: service_healthy

  postgres:
    image: postgres:16
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    networks:
      - docker_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark_iceberg_dagster_dbt:
    build: ./docker/spark_iceberg_dagster_dbt
    container_name: all_in_one
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    volumes:
      - ./data/stage:/var/lib/app/stage
      - ./data/spark/notebooks:/var/lib/app/notebooks
      - ./code/real_estate_dagster:/var/lib/app/dagster
      - ./code/dbt:/var/lib/app/dbt
    ports:
      - '8888:8888' # Spark notebook port
      - '7077:7077' # Spark port
      - '8061:8061' # Spark master web ui port
      - '8062:8062' # Spark worker web ui port
      - '10000:10000' # Thrift ODBC/JDBC port
      - '10009:10009' # Kyuubi JDBC port
      - '18080:18080' # Spark history web ui port
      - '3070:3070' # Dagster web ui port
    networks:
      docker_net:
        aliases: 
          - spark
          - dagster
          - dbt
          - all_in_one
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy

  trino: 
    build: ./docker/trino
    container_name: trino
    volumes:
      - ./data/stage:/var/lib/app/stage
      - ./docker/trino/etc:/usr/lib/trino/etc:ro
      - ./docker/trino/catalog:/opt/trino/etc/catalog
    ports:
      - 8060:8080 # Trino HTTP
    networks:
      docker_net:
        aliases: 
          - trino
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  metabase:
    build: ./docker/metabase
    hostname: metabase
    container_name: metabase
    depends_on:
      - cube
    volumes:
      - ./docker/metabase/conf:/conf
    ports:
      - 3030:3030
    networks:
      - docker_net
    healthcheck:
      test: curl --fail -I http://localhost:3030/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

networks:
  docker_net:
    driver: bridge